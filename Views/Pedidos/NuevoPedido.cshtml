@using Front_End_Gestion_Pedidos.Models.ViewModel
@model PedidoViewModel

@{
    ViewData["Title"] = "Nuevo Pedido";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="pagetitle">
    <h1>Nuevo pedido</h1>
</div>

<section class="section">
    <div class="row">
        <!-- Selección de Cliente y Medio de Pago -->

      

        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Selección de Cliente , Medio de Pago Y Direccion</h5>



                    <div class="row g-3 mb-3">

                        <div class="col-md-2 ">
                            <label for="buscarCliente" class="form-label"><b>Filtro Busqueda Cliente</b></label>
                            <div class="d-flex">
                                <input type="text" id="buscarCliente" class="form-control form-control-sm" placeholder="Buscar cliente..." oninput="filtrarClientes()" />
                                <button type="button" class="btn btn-secondary btn-sm ms-2" onclick="limpiarFiltroClientes()">Limpiar</button>
                            </div>
                        </div>


                        <div class="col-md-5">
                            <label for="cliente" class="form-label"><b>Elegir Cliente</b></label>
                            <div class="d-flex">
                                <select id="cliente" name="clienteId" class="form-select form-select-sm" onchange="cambiarCliente()">
                                    <option value="" disabled selected>Seleccione un cliente</option>
                                    @foreach (var cliente in Model.Clientes)
                                    {
                                        <option value="@cliente.NroCliente"
                                                data-dircliente="@cliente.DirCliente"
                                                data-dir2cliente="@cliente.Dir2Cliente"
                                                data-nrocliente="@cliente.NroCliente"
                                                data-cedula="@cliente.Cedula"
                                                data-estado="@cliente.Estado"
                                                data-nombre="@cliente.NombreCliente"
                                                data-punto="@cliente.Puntos"
                                                data-telefono="@cliente.TelefCliente"
                                                data-rut="@cliente.RUT"
                                                selected="@(Model.ClienteSeleccionado?.NroCliente == cliente.NroCliente ? "selected" : null)">
                                            @cliente.NombreCliente - @cliente.TelefCliente
                                        </option>
                                    }
                                </select>
                                <!-- Botón para abrir el modal -->
                                <button type="button"
                                        class="btn btn-outline-primary btn-sm"
                                        id="btnVerClienteInfo"
                                        data-bs-toggle="modal"
                                        data-bs-target="#modalClienteInfo"
                                        onclick="cargarInformacionCliente()"
                                        disabled>
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>

                        <div class="col-md-2">
                            <label for="medioPago" class="form-label"><b>Medio de Pago</b></label>
                            <select id="medioPago" class="form-select form-select-sm">
                                <option value="Contado">Contado</option>
                                <option value="Credito">Crédito</option>
                                <option value="Tarjeta">Tarjeta</option>
                            </select>
                        </div>

                        <!-- Selección de Dirección -->
                        <div class="col-md-3">

                            <label for="direccion" class="form-label"><b>Dirección</b></label>
                             <select id="direccion" name="direccion" class="form-select form-select-sm">
                                            @* <option value="" disabled selected>Seleccione una dirección</option> *@
                             </select>
                                   
                                
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>

       
    </div>

    <input type="hidden" id="puntosCliente" value="@Model.ClienteSeleccionado?.NroCliente" />

    <!-- Modal -->
    <div class="modal fade" id="modalClienteInfo" tabindex="-1" aria-labelledby="modalClienteInfoLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalClienteInfoLabel">Información del Cliente</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Numero:</strong> <span id="clienteNumero"></span></p>
                    <p><strong>Nombre:</strong> <span id="clienteNombre"></span></p>
                    <p><strong>DNI:</strong> <span id="clienteCedula"></span></p>
                    <p><strong>Dirección:</strong> <span id="clienteDireccion"></span></p>
                    <p><strong>Dirección2:</strong> <span id="clienteDireccion2"></span></p>
                    <p><strong>Teléfono:</strong> <span id="clienteTelefono"></span></p>
                    <p><strong>Estado:</strong> <span id="clienteEstado"></span></p>
                    <p><strong>Puntos:</strong> <span id="clientePunto"></span></p>
                    <p><strong>Rut:</strong> <span id="clienteRut"></span></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>





    <!-- Filtro y Tabla -->
    <div class="row">
        <div class="col-lg-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Filtro de Productos</h5>
                    <div class="mb-3">
                        <label for="filtroProductos" class="form-label">Buscar Productos</label>
                        <input type="text" id="filtroProductos" class="form-control form-control-sm" placeholder="Buscar producto..." />
                        <div class="d-flex gap-2 mt-2">
                            <button type="button" class="btn btn-primary btn-sm" onclick="aplicarFiltro()">Aplicar Filtro</button>
                            <button type="button" class="btn btn-secondary btn-sm" onclick="limpiarFiltro()">Limpiar Filtro</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-9">
            <div class="table-responsive">
                <table class="table table-hover table-sm" id="tablaProductos">
                    <thead class="table-light">
                        <tr>
                            <th class="text-nowrap">Nombre</th>
                            <th class="text-nowrap d-none d-md-table-cell">Detalle</th>
                            <th class="text-nowrap">Stock</th>
                            <th class="text-nowrap">Precio</th>
                            <th class="text-nowrap">Cantidad</th>
                        </tr>
                    </thead>
                    <tbody id="tablaProductosBody">
                        <!-- El contenido de las filas será generado dinámicamente -->
                    </tbody>
                </table>
            </div>


            <nav id="navPaginacion" class="d-flex justify-content-center align-items-center mt-0">
                <button class="btn btn-sm btn-secondary mx-1" onclick="paginaAnterior()">
                    &larr;
                </button>
                <div id="paginacion" class="d-flex gap-1"></div>
                <button class="btn btn-sm btn-secondary mx-1" onclick="paginaSiguiente()">
                    &rarr;
                </button>
            </nav>


        </div>

    </div>


    <!-- Comentarios -->
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Comentarios</h5>
                <div class="mb-3">
                    <textarea id="comentarios" class="form-control form-control-sm" rows="3" placeholder="Escribe algún comentario..."></textarea>
                </div>
            </div>
        </div>
    </div>


    <!-- Cartel rojo de advertencia -->
    <div id="alertCliente" class="alert alert-danger d-none alert-dismissible fade show" role="alert">
        Por favor, seleccione un cliente antes de enviar el pedido.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <!-- Cartel rojo de advertencia -->
    <div id="alertPedidos" class="alert alert-danger d-none" role="alert">
        Por favor, seleccione productos para el pedido
    </div>

    <!-- footer del pedido -->
    <div id="footerPedido" class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex gap-2">
                        <a href="#" class="bi bi-cart btn-sm" data-bs-toggle="modal" data-bs-target="#modalCarrito" onclick="mostrarCarrito()">VER</a>
                    </div>

                    <span class="text-danger fw-bold center">Total: $<span id="totalFooter">0.00</span></span>
                    <div class="d-flex gap-2">


                        <button type="button" id="btnEnviarPedido" class="btn btn-primary btn-sm" onclick="enviarPedido()">ENVIAR</button>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <!-- Modal Ver Carrito -->
    <div class="modal fade" id="modalCarrito" tabindex="-1" aria-labelledby="modalCarritoLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalCarritoLabel">Carrito</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-hover table-sm">
                            <thead class="table-light">
                                <tr>
                                    <th class="text-nowrap">Producto</th>
                                    <th class="text-nowrap">Precio</th>
                                    <th class="text-nowrap">Cantidad</th>
                                    <th class="text-nowrap">Subtotal</th>
                                </tr>
                            </thead>
                            <tbody id="tablaCarritoBody">
                                <!-- Las filas se generarán dinámicamente con JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-3 text-end">
                        <span class="fw-bold">Total: $<span id="totalCarrito">0</span></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>



    <!-- Modal de Mensaje -->
    <div class="modal fade" id="modalMensaje" tabindex="-1" aria-labelledby="modalMensajeLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalMensajeLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="mensajeModal"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>



</section>





<!-- Scripts -->
<script>
   



    // Escuchar el evento "show.bs.modal" para cargar la información
    document.getElementById("modalClienteInfo").addEventListener("show.bs.modal", cargarInformacionCliente);

    const token = '@ViewData["Token"]';
    const rol = '@ViewData["Role"]';
    const idUsuario = '@ViewData["IdUsuario"]';

    let puntos = 0;

    let cantidadesSeleccionadas = {};


    function filtrarClientes() {
        const filtro = document.getElementById("buscarCliente").value.trim().toLowerCase();
        const clienteSelect = document.getElementById("cliente");

        // Obtener todas las opciones originales
        const opciones = clienteSelect.querySelectorAll("option");

        // Ocultar o mostrar opciones según el filtro
        opciones.forEach(option => {
            if (!option.value) return; // Ignorar la opción por defecto
            const nombre = option.getAttribute("data-nombre").toLowerCase();
            const telefono = option.getAttribute("data-telefono").toLowerCase();
            const coincide = nombre.includes(filtro) || telefono.includes(filtro);
            option.style.display = coincide ? "" : "none";
        });

        // Reiniciar la selección
        clienteSelect.selectedIndex = 0;
    }

    function limpiarFiltroClientes() {
        const buscarCliente = document.getElementById("buscarCliente");
        const clienteSelect = document.getElementById("cliente");

        // Guardar la opción seleccionada actualmente
        const opcionSeleccionada = clienteSelect.value;

        buscarCliente.value = ""; // Limpia el campo de búsqueda

        // Mostrar todas las opciones
        const opciones = clienteSelect.querySelectorAll("option");
        opciones.forEach(option => {
            option.style.display = ""; // Asegura que todas las opciones sean visibles
        });

        // Restaurar la selección previa
        clienteSelect.value = opcionSeleccionada;
    }

    function cambiarCliente() {
         const clienteSelect = document.getElementById('cliente');
        // const puntosCliente = parseInt(clienteSelect.options[clienteSelect.selectedIndex].getAttribute('data-nrocliente')) || 0;

        const selectedOption = clienteSelect.options[clienteSelect.selectedIndex];

        // Verificar si hay un cliente seleccionado
        const btnVerClienteInfo = document.getElementById("btnVerClienteInfo");
        if (clienteSelect.value) {
            btnVerClienteInfo.disabled = false; // Habilitar botón
        } else {
            btnVerClienteInfo.disabled = true; // Deshabilitar botón
        }


        puntos = parseInt(selectedOption.getAttribute("data-nroCliente"));

        cargarDirecciones(); // Refrescar direcciones
        renderizarTabla(); // Refrescar precios

        // Recalcular el total con los nuevos precios asociados al cliente
        let total = 0;
        Object.keys(cantidadesSeleccionadas).forEach(codigo => {
            const cantidad = cantidadesSeleccionadas[codigo].cantidad;
            const producto = productosOriginales.find(p => p.codigo == codigo);

            if (producto && cantidad > 0) {
                // Actualizar el precio según los puntos del cliente
                let precio = producto.precio; // Precio por defecto
                if (puntos === 1) precio = producto.stock_2;
                if (puntos === 2) precio = producto.stock_3;
                if (puntos === 3) precio = producto.stock_4;
                if (puntos === 4) precio = producto.stock_5;

                // Actualizar el total
                total += precio * cantidad;

                // Actualizar el precio en cantidades seleccionadas
                cantidadesSeleccionadas[codigo].precio = precio;
            }
        });

        // Actualizar el total en el footer
        document.getElementById("totalFooter").textContent = total.toFixed(2);
    }

    //Cargo modal detalles cliente
    function cargarInformacionCliente() {
        const clienteSelect = document.getElementById("cliente");
        const selectedOption = clienteSelect.options[clienteSelect.selectedIndex];

        // Obtener atributos personalizados del cliente seleccionado
        const numero = selectedOption.getAttribute("data-nrocliente");
        const nombre = selectedOption.getAttribute("data-nombre");
        const cedula = selectedOption.getAttribute("data-cedula");
        const direccion = selectedOption.getAttribute("data-dircliente");
        const direccion2 = selectedOption.getAttribute("data-dir2cliente");
        const telefono = selectedOption.getAttribute("data-telefono");
        const estado = selectedOption.getAttribute("data-estado");
        const punto = selectedOption.getAttribute("data-punto");
        const rut = selectedOption.getAttribute("data-rut");

        // Actualizar los elementos del modal con la información del cliente
        document.getElementById("clienteNumero").textContent = numero;
        document.getElementById("clienteNombre").textContent = nombre;
        document.getElementById("clienteCedula").textContent = cedula;
        document.getElementById("clienteDireccion").textContent = direccion;
        document.getElementById("clienteDireccion2").textContent = direccion2;
        document.getElementById("clienteTelefono").textContent = telefono;
        document.getElementById("clienteEstado").textContent = estado;
        document.getElementById("clientePunto").textContent = punto;
        document.getElementById("clienteRut").textContent = rut;
    }

    // Cargar direcciones según cliente seleccionado
    function cargarDirecciones() {
        const clienteSelect = document.getElementById("cliente");
        const direccionSelect = document.getElementById("direccion");

        // Limpiar el select de direcciones
        //direccionSelect.innerHTML = '<option value="" disabled selected>Seleccione una dirección</option>';

        direccionSelect.innerHTML = '';
        // Obtener el cliente seleccionado
        const selectedOption = clienteSelect.options[clienteSelect.selectedIndex];

        if (selectedOption) {
            const dir1 = selectedOption.getAttribute("data-dircliente");
            const dir2 = selectedOption.getAttribute("data-dir2cliente");

            if (dir1) {
                const option1 = document.createElement("option");
                option1.value = dir1;
                option1.textContent = dir1;
                direccionSelect.appendChild(option1);
            }

            if (dir2) {
                const option2 = document.createElement("option");
                option2.value = dir2;
                option2.textContent = dir2;
                direccionSelect.appendChild(option2);
            }
        }
    }



    function actualizarTablaCantidades() {
        const cantidadesInputs = document.querySelectorAll('[id^="cantidad_"]');
        cantidadesInputs.forEach(input => {
            input.value = 0; // Establecer el valor a 0
        });

        let total = 0;
        document.getElementById("totalFooter").textContent = total.toFixed(2);
    }

    function actualizarCantidad(codigo, cantidad) {
        cantidad = parseInt(cantidad) || 0; // Convertir a entero o asignar 0 si es inválido

        // Obtener la fila correspondiente al producto
        const fila = document.querySelector(`#cantidad_${codigo}`).closest("tr");

        // Leer el precio desde la celda correspondiente en esa fila
        const precio = parseFloat(fila.querySelector("td:nth-child(4)").textContent);

        // Actualizar o eliminar la cantidad y precio seleccionados
        if (cantidad > 0) {
            // Guardar la cantidad y el precio en un objeto
            cantidadesSeleccionadas[codigo] = { cantidad: cantidad, precio: precio };
        } else {
            // Eliminar del objeto si la cantidad es 0
            delete cantidadesSeleccionadas[codigo];
        }

        // Calcular el total
        let total = 0;
        Object.keys(cantidadesSeleccionadas).forEach(codigo => {
            const item = cantidadesSeleccionadas[codigo];
            total += item.precio * item.cantidad; // Calcular el subtotal
        });

        // Actualizar el total en el footer
        document.getElementById("totalFooter").textContent = total.toFixed(2);
    }





    function mostrarCarrito() {
        const tablaCarritoBody = document.getElementById("tablaCarritoBody");
        const totalCarrito = document.getElementById("totalCarrito");

        let total = 0;

        // Limpiar la tabla del carrito antes de agregar nuevas filas
        tablaCarritoBody.innerHTML = "";

        Object.keys(cantidadesSeleccionadas).forEach(codigo => {
            const cantidad = cantidadesSeleccionadas[codigo].cantidad;
            const producto = productosOriginales.find(p => p.codigo == codigo);

            if (producto && cantidad > 0) {
                let precio = producto.precio; // Precio por defecto
                if (puntos === 1) precio = producto.stock_2;
                if (puntos === 2) precio = producto.stock_3;
                if (puntos === 3) precio = producto.stock_4;
                if (puntos === 4) precio = producto.stock_5;

                const subtotal = precio * cantidad;
                total += subtotal;

                // Agregar fila al modal
                const filaCarrito = document.createElement("tr");
                filaCarrito.innerHTML = `
                    <td>${producto.descripcion}</td>
                    <td>$${precio.toFixed(2)}</td>
                    <td>${cantidad}</td>
                    <td>$${subtotal.toFixed(2)}</td>
                `;
                tablaCarritoBody.appendChild(filaCarrito);
            }
        });

        // Actualizar el total en el modal
        totalCarrito.textContent = total.toFixed(2);
    }



    let productosPorPagina = 8;
    let paginaActual = 1;
    let productosOriginales = @Html.Raw(Json.Serialize(Model.Productos)); // Lista original de productos
    let productosFiltrados = [...productosOriginales]; // Inicializar lista filtrada con todos los productos

    // Función para renderizar la tabla
    function renderizarTabla() {
        //const puntosCliente = parseInt(document.getElementById("puntosCliente").value, 10) || 0; // Capturar puntos del cliente
        const puntosCliente = puntos;
        const inicio = (paginaActual - 1) * productosPorPagina;
        const fin = inicio + productosPorPagina;
        const productosPagina = productosFiltrados.slice(inicio, fin);

        const cuerpoTabla = document.querySelector("#tablaProductos tbody");
        cuerpoTabla.innerHTML = ""; // Limpiar contenido anterior

        productosPagina.forEach(producto => {

            const cantidadSeleccionada = cantidadesSeleccionadas[producto.codigo] || 0; // Recuperar cantidad seleccionada




            // Determinar el precio según los puntos del cliente
            let precio = producto.precio; // Precio por defecto
            if (puntosCliente === 1) precio = producto.stock_2;
            if (puntosCliente === 2) precio = producto.stock_3;
            if (puntosCliente === 3) precio = producto.stock_4;
            if (puntosCliente === 4) precio = producto.stock_5;

            const fila = document.createElement("tr");

                if (cantidadSeleccionada.cantidad >= 1) {
                    fila.innerHTML = `
                    <td>${producto.descripcion}</td>
                    <td class="d-none d-md-table-cell">${producto.detalle || "Sin detalle"}</td>
                    <td>${producto.stock_Actual}</td>
                    <td>${precio.toFixed(2)}</td>
                    <td>
                       <input
                            type="number"
                            id="cantidad_${producto.codigo}"
                            class="form-control form-control-sm text-center"
                            min="0"
                            value="${cantidadSeleccionada.cantidad}"
                                onchange="actualizarCantidad('${producto.codigo}', this.value)" />
                    </td>

                `;
                    cuerpoTabla.appendChild(fila);
                }
                else if (producto.precio > 0) {
                    fila.innerHTML = `
                <td>${producto.descripcion}</td>
                <td class="d-none d-md-table-cell">${producto.detalle || "Sin detalle"}</td>
                <td>${producto.stock_Actual}</td>
                <td>${precio.toFixed(2)}</td>
                <td>
                   <input
                        type="number"
                        id="cantidad_${producto.codigo}"
                        class="form-control form-control-sm text-center"
                        min="0"
                        value="${cantidadSeleccionada}"
                            onchange="actualizarCantidad('${producto.codigo}', this.value)" />
                </td>

            `;
                    cuerpoTabla.appendChild(fila);
                } else {
                    fila.innerHTML = `
                    <td>${producto.descripcion}</td>
                    <td class="d-none d-md-table-cell">${producto.detalle || "Sin detalle"}</td>
                    <td>${producto.stock_Actual}</td>
                    <td>${0}</td>
                    <td>
                       <input
                            type="number"
                            id="cantidad_${producto.codigo}"
                            class="form-control form-control-sm text-center"
                            min="0"
                            value="${cantidadSeleccionada}"
                            onchange="actualizarCantidad('${producto.codigo}', this.value)" />
                    </td>

                `;
                    cuerpoTabla.appendChild(fila);
                }

        });

        renderizarPaginacion(); // Actualizar la paginación
    }


    // Función para renderizar la paginación
    function renderizarPaginacion() {
        const paginacionDiv = document.getElementById("paginacion");
        paginacionDiv.innerHTML = ""; // Limpiar contenido anterior

        const totalPaginas = Math.ceil(productosFiltrados.length / productosPorPagina);

        for (let i = 1; i <= totalPaginas; i++) {
            const boton = document.createElement("button");
            boton.innerText = i;
            boton.className = `btn btn-sm ${i === paginaActual ? "btn-primary" : "btn-secondary"}`;
            boton.onclick = () => {
                paginaActual = i;
                renderizarTabla();
            };
            paginacionDiv.appendChild(boton);
        }
    }

    function paginaAnterior() {
        if (paginaActual > 1) {
            paginaActual--;
            renderizarTabla();
        }
    }

    function paginaSiguiente() {
        const totalPaginas = Math.ceil(productosFiltrados.length / productosPorPagina);
        if (paginaActual < totalPaginas) {
            paginaActual++;
            renderizarTabla();
        }
    }

    // Función para aplicar el filtro
    function aplicarFiltro() {
        const filtro = document.getElementById("filtroProductos").value.trim().toLowerCase();
        productosFiltrados = productosOriginales.filter(producto =>
            producto.descripcion.toLowerCase().includes(filtro)
        );

        paginaActual = 1; // Reiniciar a la primera página
        renderizarTabla();
    }

    // Función para limpiar el filtro
    function limpiarFiltro() {
        document.getElementById("filtroProductos").value = ""; // Limpiar input
        productosFiltrados = [...productosOriginales]; // Restaurar productos originales

        paginaActual = 1; // Reiniciar a la primera página
        renderizarTabla();
    }

    // Inicializar tabla y paginación al cargar la página
    document.addEventListener("DOMContentLoaded", () => {
        renderizarTabla();
    });

    //MUestra si tiro success o error el pedido
    function mostrarMensajeModal(titulo, mensaje) {
        // Establecer el título y el mensaje del modal
        document.getElementById('modalMensajeLabel').textContent = titulo;
        document.getElementById('mensajeModal').textContent = mensaje;

        // Mostrar el modal
        const modal = new bootstrap.Modal(document.getElementById('modalMensaje'));
        modal.show();
    }


    // Enviar el pedido
    function enviarPedido() {
        const btnEnviar = document.getElementById('btnEnviarPedido');
        btnEnviar.disabled = true; // Deshabilitar el botón para prevenir clicks múltiples

        const clienteId = document.getElementById('cliente').value;
        const direccion = document.getElementById('direccion').value;
        const metodoPago = document.getElementById('medioPago').value;
        // const comentarios = "[Comentarios iniciales]: "document.getElementById('comentarios').value;
        const comentarios = document.getElementById('comentarios').value;

        // Validar si se ha seleccionado un cliente
        if (!clienteId) {
            // Mostrar el cartel rojo
            const alertCliente = document.getElementById('alertCliente');
            alertCliente.classList.remove('d-none'); // Quitar la clase que oculta el cartel
            alertCliente.textContent = 'Debe seleccionar un cliente antes de continuar.';

            btnEnviar.disabled = false; // Rehabilitar el botón después de recibir la respuesta
            return; // Detener la ejecución de la función si no hay cliente seleccionado
        }
        // Ocultar el cartel si el cliente está seleccionado
        const alertCliente = document.getElementById('alertCliente');
        alertCliente.classList.add('d-none');

        var idVendedor = null;
        if (rol == "Vendedor") {
            idVendedor = parseInt(idUsuario, 10);
        }
        

        const pedido = {
            pedido: {
                idVendedor: idVendedor,
                idCliente: parseInt(clienteId),
                idAdministracion: 1,
                fechaCreacion: new Date().toISOString(),
                estado: "Preparando",
                metodoPago,
                total: 0,
                comentarios,
                direccion
            },
            lineasPedido: []
        };


        let total = 0;


        // Iterar sobre el objeto "cantidadesSeleccionadas" en lugar de inputs visibles
        Object.keys(cantidadesSeleccionadas).forEach(codigo => {
            const cantidad = cantidadesSeleccionadas[codigo].cantidad;
            if (cantidad > 0) {
                //const producto = productosOriginales.find(p => p.codigo === codigo); // Buscar el producto en la lista original
                const producto = productosOriginales.find(p => String(p.codigo) === String(codigo));
                if (producto) {

                    let precio = producto.precio; // Precio por defecto
                    if (puntos === 1) precio = producto.stock_2;
                    if (puntos === 2) precio = producto.stock_3;
                    if (puntos === 3) precio = producto.stock_4;
                    if (puntos === 4) precio = producto.stock_5;
                    const subtotal = precio * cantidad;
                    total += subtotal;
                    pedido.lineasPedido.push({
                        codigo: producto.codigo,
                        cantidad: cantidad,
                        precioUnitario: precio
                    });
                }
            }
        });

        pedido.pedido.total = total;



        if (pedido.lineasPedido.length == 0) {

            // Mostrar el cartel rojo
            const alertPedidos = document.getElementById('alertPedidos');
            alertPedidos.classList.remove('d-none'); // Quitar la clase que oculta el cartel
            alertPedidos.textContent = 'Debe seleccionar productos para el pedido';

            btnEnviar.disabled = false; // Rehabilitar el botón después de recibir la respuesta
            return; // Detener la ejecución de la función si no hay cliente seleccionado
        }
        // Ocultar el cartel si el cliente está seleccionado
        const alertPedidos = document.getElementById('alertPedidos');
        alertPedidos.classList.add('d-none');


        //https://apigestionpedidos-fxbafbb8b0htapdr.canadacentral-01.azurewebsites.net
        //https://localhost:7078/api/Pedidos
        fetch('https://gestionpedidosapi-dfcbf9hrchbthraz.brazilsouth-01.azurewebsites.net/api/v1/Pedidos', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}` // Incluir el token
            },
            body: JSON.stringify(pedido)
        })
            .then(response => {
                if (response.ok) {
                    return response.status;
                } else {
                    throw new Error('Error al realizar el pedido.');
                }
            })
            .then(data => {
                mostrarMensajeModal('Pedido Realizado', 'El pedido fue realizado con éxito.');

                // Limpiar cantidades seleccionadas
                cantidadesSeleccionadas = {};
                actualizarTablaCantidades();

                // Limpiar comentarios
                document.getElementById('comentarios').value = '';
            })
            .catch(error => {
                mostrarMensajeModal('Error', 'Hubo un problema al realizar el pedido. Inténtelo nuevamente.');
                console.error('Error:', error);
            })
            .finally(() => {
                btnEnviar.disabled = false; // Rehabilitar el botón después de recibir la respuesta
            });
    }
</script>

<style>

    #footerPedido {
        align-items: end; /* Centrado vertical del contenido interno */
    }

    #btnEnviarPedido {
        align-items: end; /* Centrado vertical del contenido interno */
    }

    #footerPedido {
        margin-top: 20px; /* Ajusta el valor según la distancia deseada */
    }

    #btnEnviarPedido {
        margin-top: 5px; /* Ajusta el valor según sea necesario */
    }

    #navPaginacion {
        margin: 0px; /* Reduce el espacio superior */
        margin-bottom: 2rem;
        background-color: #fff; /* Fondo blanco */
        padding: 0.5rem; /* Espaciado interno */
        border-radius: 0.5rem; /* Bordes redondeados */
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Sombra suave */
    }

        #navPaginacion button {
            padding: 0.5rem; /* Espaciado interno */
            border-radius: 0.5rem; /* Bordes redondeados */
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Sombra suave */
            font-size: larger;
            margin: 0px 2px 0px 2px;
        }

    #tablaProductos {
        margin-bottom: 0px;
    }

        #tablaProductos th, #tablaProductos td {
            text-align: center; /* Centrar el texto horizontalmente */
            vertical-align: middle; /* Centrar el texto verticalmente */
        }

            #tablaProductos td:nth-child(5) {
                text-align: center; /* Asegura que los inputs estén alineados al centro */
            }

                #tablaProductos td:nth-child(5) input.form-control {
                    width: 50%; /* Ajusta el ancho según sea necesario */
                    margin: 0 auto; /* Centra horizontalmente */
                    text-align: center; /* Centra el texto dentro del input */
                    display: block; /* Asegura el centrado en el contenedor */
                  }

    #tablaProductos td:nth-child(4) {
       background-color: RGB(2, 117, 216);
       color: white;
       border-style: solid;
                border-width: 1px;
                border-color: black;
    }

   /* #tablaProductos th:nth-child(4) {
       border-style: solid;
       border-width: 1px;
       border-color: black;
   } */

</style>

