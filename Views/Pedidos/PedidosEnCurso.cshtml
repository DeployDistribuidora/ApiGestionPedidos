@using Front_End_Gestion_Pedidos.Models.ViewModel
@inject IHttpContextAccessor HttpContextAccessor
@model Front_End_Gestion_Pedidos.Models.ViewModel.SupervisarPedidosViewModel


@if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Session.GetString("UsuarioLogueado")))
{
    var role = HttpContextAccessor.HttpContext.Session.GetString("Role");

    <div class="pagetitle">
        <h1>Pedidos en Curso</h1>
    </div>
    @if (role == "Cliente")
    {
        <div class="alert alert-info d-inline-block alert-dismissible fade show" role="alert">
            Solo puedes añadir comentarios a los pedidos. Contacta a Administración para realizar cualquier modificación adicional.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    else if (role == "Vendedor")
    {
        <div class="alert alert-info d-inline-block alert-dismissible fade show" role="alert">
            Puedes añadir comentarios y editar pedidos en estado "Pendiente".
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Sección Principal -->
    <section class="section">
        <div class="row">
            <!-- Filtros de Búsqueda -->
            <div class="col-lg-5">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Filtros de Búsqueda</h5>
                        <form method="get" asp-action="PedidosEnCurso" class="row g-3">
                            @if (role == "Vendedor")
                            {
                                <!-- Filtro Cliente -->
                                <div class="col-md-6">
                                    <label for="filterCliente" class="form-label">Cliente</label>
                                    <input type="text" id="filterCliente" class="form-control form-control-sm mb-2"
                                           placeholder="Escribe para buscar un cliente..." oninput="filtrarClientes()">

                                    <!-- Select con lista de clientes -->
                                    <select id="clienteSelect" name="cliente" class="form-select form-select-sm">
                                        <option value="" disabled selected>Seleccione un cliente</option>
                                        @foreach (var cliente in Model.Clientes)
                                        {
                                            <option value="@cliente.NroCliente"
                                                    data-id="@cliente.NroCliente"
                                                    data-nombre="@cliente.NombreCliente">
                                                @cliente.NroCliente - @cliente.NombreCliente
                                            </option>
                                        }


                                    </select>
                                </div>


                            }
                            <!-- Filtro por Vendedor -->
                            <div class="col-md-6">
                                <label for="selectedVendedor" class="form-label">Vendedor</label>
                                <select id="selectedVendedor" name="vendedor" class="form-select form-select-sm mb-2">
                                    <option value="">Todos los vendedores</option>
                                    @foreach (var vendedor in Model.Vendedores)
                                    {
                                         <option value="@vendedor.nro_Vendedor" selected="@(Model.Vendedor == vendedor.nro_Vendedor.ToString() ? "selected" : null)">
                                            @vendedor.Nombre
                                        </option>
                                    }
                                </select>
                            </div>

                            <!-- Filtro por Estado -->
                            <div class="col-md-6">
                                <label for="inputEstado" class="form-label">Estado</label>
                                <select name="estado" class="form-select form-select-sm" id="inputEstado">
                                    <option value="" selected>Todos los estados</option>
                                    <option value="Pendiente">Pendientes</option>
                                    <option value="Preparando">Preparando</option>
                                    <option value="En viaje">En viaje</option>
                                </select>
                            </div>
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary btn-sm">Buscar</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Tabla de Pedidos -->
            <div class="col-lg-7">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Pedidos</h5>
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col" class="text-center">Acciones</th>
                                    <th scope="col">Nro</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col" class="d-none d-md-table-cell">Vendedor</th>
                                    <th scope="col">Estado</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (!Model.Pedidos.Any())
                                {
                                    <tr>
                                        <td colspan="5" class="text-center text-muted">No se encontraron pedidos en curso.</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var pedido in Model.Pedidos)
                                    {
                                        var cliente = Model.Clientes.FirstOrDefault(c => c.NroCliente == pedido.IdCliente);
                                        var vendedor = Model.Vendedores.FirstOrDefault(v => v.nro_Vendedor == pedido.IdVendedor);
                                        // Determinar la clase CSS según el estado del pedido
                                        string rowClass = pedido.Estado switch
                                        {
                                            "Pendiente" => "table-info",
                                            "Preparando" => "table-primary",
                                            "En viaje" => "table-warning",
                                            "Entregado" => "table-success",
                                            "Cancelado" => "table-danger",
                                            _ => "" // Sin clase específica para otros estados
                                        };
                                        <tr class="@rowClass">
                                            <td class="text-center">
                                                <!-- Contenedor flex para los botones -->
                                                <div class="d-flex flex-column flex-md-row justify-content-center align-items-center gap-2">
                                                    <!-- Botón para Ver Detalle -->
                                                    <button type="button" class="btn btn-outline-primary btn-sm" data-bs-toggle="modal"
                                                            data-bs-target="#modalDetallePedido" data-id-pedido="@pedido.IdPedido" title="Ver Detalle">
                                                        <i class="bi bi-eye"></i>
                                                    </button>

                                                    <!-- Botón para Añadir Comentario -->
                                                    @if (role == "Cliente" || role == "Vendedor")
                                                    {
                                                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="mostrarModalComentario(@pedido.IdPedido)"
                                                                title="Añadir Comentario">
                                                            <i class="bi bi-chat-dots"></i>
                                                        </button>
                                                    }

                                                    <!-- Botón para Editar (solo para Vendedor y estado "Pendiente") -->
                                                    @if (role == "Vendedor" && pedido.Estado == "Pendiente")
                                                    {
                                                       

                                                        <a href="@Url.Action("ModificarPedido", "Pedidos", new { idPedido = pedido.IdPedido })"
                                                           class="btn btn-outline-warning btn-sm" title="Modificar Pedido">
                                                            <i class="bi bi-pencil-square"></i>
                                                        </a>
                                                    }
                                                </div>
                                            </td>

                                            <td>@pedido.IdPedido</td>
                                            <td>@(cliente != null ? cliente.NombreCliente.Trim() : "Cliente desconocido")</td>
                                            <td class="d-none d-md-table-cell">@vendedor?.Nombre</td>
                                            <td>@pedido.Estado</td>
                                        </tr>
                                    }
                                }
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>

        </div>
    </section>

    <!-- Modal Detalle Pedido -->
    <div class="modal fade" id="modalDetallePedido" tabindex="-1" aria-labelledby="detallePedidoLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detallePedidoLabel">Detalle del Pedido</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="detallePedidoContent">
                    <div class="text-center text-muted">
                        <p>Cargando...</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para añadir comentario -->
    <div class="modal fade" id="modalComentario" tabindex="-1" aria-labelledby="modalComentarioLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalComentarioLabel">Añadir Comentario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form method="post" asp-action="AñadirComentario" asp-controller="Pedidos">
                    <div class="modal-body">
                        <input type="hidden" id="pedidoId" name="id" />
                        <textarea name="comentario" id="comentario" class="form-control" rows="4" placeholder="Escribe tu comentario aquí..." required></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Guardar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal fade" id="mensajeModal" tabindex="-1" aria-labelledby="mensajeModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="mensajeModalLabel">Notificación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <p id="mensajeModalTexto"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Aceptar</button>
                </div>
            </div>
        </div>
    </div>



}

<script>
    const modalDetallePedido = document.getElementById('modalDetallePedido');

    modalDetallePedido.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const idPedido = button.getAttribute('data-id-pedido');
        const detalleContent = document.getElementById('detallePedidoContent');

        detalleContent.innerHTML = "Cargando...";

        fetch(`/Pedidos/DetallePedido?idPedido=${idPedido}`)
            .then(response => response.text())
            .then(html => {
                detalleContent.innerHTML = html;
            })
            .catch(error => {
                detalleContent.innerHTML = `<div class="text-danger">Error al cargar el detalle: ${error.message}</div>`;
            });
    });

    document.addEventListener("DOMContentLoaded", function () {
        const inputEstado = document.getElementById('inputEstado');

        // Recuperar el estado seleccionado de la URL y aplicarlo al <select>
        const urlParams = new URLSearchParams(window.location.search);
        const estadoSeleccionado = urlParams.get("estado");

        if (estadoSeleccionado) {
            inputEstado.value = estadoSeleccionado;
        }
    });


    function mostrarModalComentario(idPedido) {
        document.getElementById("pedidoId").value = idPedido;
        const modalComentario = new bootstrap.Modal(document.getElementById("modalComentario"));
        modalComentario.show();
    }

    document.addEventListener("DOMContentLoaded", function () {
        const mensaje = '@TempData["Mensaje"]';
        if (mensaje) {
            document.getElementById("mensajeModalTexto").innerText = mensaje;
            const mensajeModal = new bootstrap.Modal(document.getElementById("mensajeModal"));
            mensajeModal.show();
        }
    });

    function filtrarClientes() {
        const filtro = document.getElementById("filterCliente").value.trim().toLowerCase();
        const clienteSelect = document.getElementById("clienteSelect");

        // Obtener la opción actualmente seleccionada
        const opcionSeleccionada = clienteSelect.value;

        // Obtener todas las opciones del select
        const opciones = clienteSelect.querySelectorAll("option");

        let hayCoincidencias = false;

        opciones.forEach(option => {
            if (!option.value) return; // Ignorar la opción por defecto

            const nombre = option.getAttribute("data-nombre").toLowerCase();
            const telefono = option.getAttribute("data-telefono") ? option.getAttribute("data-telefono").toLowerCase() : "";
            const coincide = nombre.includes(filtro) || telefono.includes(filtro);

            if (coincide) {
                option.style.display = ""; // Asegurar que la opción está visible
                option.disabled = false;  // Permitir selección
                hayCoincidencias = true;
            } else {
                option.style.display = "none";  // Ocultar opción que no coincide
            }
        });

        // Restaurar la selección anterior después del filtrado
        if (opcionSeleccionada) {
            clienteSelect.value = opcionSeleccionada;
        }
    }




    document.addEventListener("DOMContentLoaded", function () {
        const selectedVendedor = document.getElementById('selectedVendedor');

        // Recuperar el vendedor seleccionado de la URL y aplicarlo al <select>
        const urlParams = new URLSearchParams(window.location.search);
        const vendedorSeleccionado = urlParams.get("vendedor");

        if (vendedorSeleccionado) {
            selectedVendedor.value = vendedorSeleccionado;
        }
    });
</script>
      