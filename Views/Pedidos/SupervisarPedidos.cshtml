@using Front_End_Gestion_Pedidos.Models.ViewModel
@inject IHttpContextAccessor HttpContextAccessor
@model SupervisarPedidosViewModel

@if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Session.GetString("UsuarioLogueado")))
{
    var role = HttpContextAccessor.HttpContext.Session.GetString("Role");

    <div class="pagetitle">
        <h1>Supervisar pedidos</h1>
    </div>
    @if (role == "Administracion")
    {
        <div class="alert alert-info d-inline-block" role="alert">
            Se muestran únicamente los pedidos pendientes y en viaje. Los pedidos a preparar pasarán a los supervisores de carga.
        </div>


    }
    else if (role == "Supervisor de Carga")
    {
        <div class="alert alert-info d-inline-block" role="alert">
            Se muestran únicamente los pedidos a preparar. Una vez embarcado un pedido, coordinar con administración por la confirmación de su entrega.
        </div>
    }


    <!-- Sección Principal -->
    <section class="section">
        <div class="row">
            <!-- Filtros de Búsqueda -->
            <div class="col-lg-5">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Filtros de Búsqueda</h5>
                        <form method="get" asp-action="SupervisarPedidos" class="row g-3">

                            <!-- Filtro Cliente -->
                            <div class="col-md-6">
                                <label for="filterCliente" class="form-label">Cliente</label>
                                <input type="text" id="filterCliente" class="form-control form-control-sm mb-2"
                                       placeholder="Escribe para buscar un cliente..." oninput="filterClientes()">

                                <!-- Contenedor de opciones scrolleable -->
                                <div id="clientesContainer" class="border rounded p-2 bg-white shadow-sm"
                                     style="max-height: 150px; overflow-y: auto;">
                                    @foreach (var cliente in Model.Clientes)
                                    {
                                        <div class="cliente-option p-2"
                                             data-nombre="@cliente.NombreCliente"
                                             data-id="@cliente.NroCliente"
                                             onclick="selectCliente('@cliente.NombreCliente', '@cliente.NroCliente')">
                                            @cliente.NombreCliente
                                        </div>
                                    }
                                </div>

                                <!-- Campo oculto para enviar el cliente seleccionado -->
                                <input type="hidden" id="selectedCliente" name="cliente">
                            </div>


                            <!-- Filtro por Vendedor -->
                            <div class="col-md-6">
                                <label for="filterVendedor" class="form-label">Vendedor</label>
                                <input type="text" id="filterVendedor" class="form-control form-control-sm mb-2"
                                       placeholder="Escribe para buscar un vendedor..." oninput="filterVendedores()">

                                <!-- Contenedor de opciones scrolleable -->
                                <div id="vendedoresContainer" class="border rounded p-2 bg-white shadow-sm"
                                     style="max-height: 150px; overflow-y: auto;">
                                    @foreach (var vendedor in Model.Vendedores)
                                    {
                                        <div class="vendedor-option p-2"
                                             data-nombre="@vendedor.Nombre"
                                             data-id="@vendedor.nro_Vendedor"
                                             onclick="selectVendedor('@vendedor.Nombre', '@vendedor.nro_Vendedor')">
                                            @vendedor.Nombre
                                        </div>
                                    }
                                </div>

                                <!-- Campo oculto para enviar el vendedor seleccionado -->
                                <input type="hidden" id="selectedVendedor" name="vendedor">
                            </div>

                            @if (role == "Administracion")
                            {
                                <div class="col-md-4">
                                    <label for="inputEstado" class="form-label">Estado</label>
                                    <select name="estado" class="form-select form-select-sm" id="inputEstado">
                                        <option value="" selected>Seleccione un estado</option>
                                        <option value="Pendiente">Pedidos Pendientes</option>
                                        <option value="En viaje">Pedidos En viaje</option>
                                    </select>
                                </div>
                            }
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary btn-sm">Buscar</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Tabla de Pedidos -->
            <div class="col-lg-7">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Pedidos</h5>
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col">Acciones</th>
                                    <th scope="col">Nro</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col">Vendedor</th>
                                    <th scope="col" class="d-none d-md-table-cell">Estado</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (!Model.Pedidos.Any())
                                {
                                    <tr>
                                        <td colspan="5" class="text-center text-muted">No se encontraron pedidos con los filtros aplicados.</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var pedido in Model.Pedidos)
                                    {
                                        var cliente = Model.Clientes.FirstOrDefault(c => c.NroCliente == pedido.IdCliente);

                                        <tr>
                                            <td>
                                                <!-- Contenedor flex con utilidades de Bootstrap -->
                                                <div class="d-flex flex-wrap flex-md-nowrap gap-2 justify-content-md-start justify-content-center">
                                                    <!-- Botón Ver Detalles -->
                                                    <button type="button" class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modalDetallePedido" data-id-pedido="@pedido.IdPedido" title="Ver Detalles">
                                                        <i class="bi bi-eye"></i>
                                                    </button>


                                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="mostrarModalComentario(@pedido.IdPedido)"
                                                            title="Añadir Comentario">
                                                        <i class="bi bi-chat-dots"></i>
                                                    </button>

                                                    <!-- Botones según el rol y estado -->
                                                    @if (role == "Administracion")
                                                    {
                                                        <!-- Botón Modificar Pedido -->
                                                        <a href="@Url.Action("ModificarPedido", "Pedidos", new { idPedido = pedido.IdPedido })"
                                                           class="btn btn-outline-warning btn-sm" title="Modificar Pedido">
                                                            <i class="bi bi-pencil-square"></i>
                                                        </a>
                                                        @if (pedido.Estado == "Pendiente")
                                                        {
                                                            <button class="btn btn-outline-info btn-sm" onclick="mostrarConfirmacion(@pedido.IdPedido, 'Preparando')" title="Preparar Pedido">
                                                                <i class="bi bi-box-fill"></i>
                                                            </button>

                                                        }
                                                        else if (pedido.Estado == "En viaje")
                                                        {
                                                            <button class="btn btn-outline-success btn-sm" onclick="mostrarConfirmacion(@pedido.IdPedido, 'Entregado')" title="Entregar Pedido">
                                                                <i class="bi bi-check-circle"></i>
                                                            </button>
                                                        }

                                                    }
                                                    else if (role == "Supervisor de Carga" && pedido.Estado == "Preparando")
                                                    {
                                                        <button class="btn btn-outline-warning btn-sm" onclick="mostrarConfirmacion(@pedido.IdPedido, 'En viaje')" title="Embarcar Pedido">
                                                            <i class="bi bi-truck"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>


                                            <td>@pedido.IdPedido</td>
                                            <td>@(cliente != null ? cliente.NombreCliente?.Trim() : "Cliente desconocido")</td>
                                            <td>
                                                @Model.Vendedores.FirstOrDefault(v => v.nro_Vendedor == pedido.IdVendedor)?.Nombre
                                            </td>
                                            <td class="d-none d-md-table-cell">@pedido.Estado</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>


        </div>
    </section>


    <!-- Modal Detalle Pedido -->
    <div class="modal fade" id="modalDetallePedido" tabindex="-1" aria-labelledby="detallePedidoLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detallePedidoLabel">Detalle del Pedido</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="detallePedidoContent">
                    <div class="text-center text-muted">
                        <p>Cargando...</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Modal para añadir comentario -->
    <div class="modal fade" id="modalComentario" tabindex="-1" aria-labelledby="modalComentarioLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalComentarioLabel">Añadir Comentario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form method="post" asp-action="AñadirComentario" asp-controller="Pedidos">
                    <div class="modal-body">
                        <input type="hidden" id="pedidoId" name="id" />
                        <textarea name="comentario" id="comentario" class="form-control" rows="4" placeholder="Escribe tu comentario aquí..." required></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Guardar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>




    <!-- Modal de Confirmación -->
    @* <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#confirmarCambioEstado">
        Confirmar Estado
    </button> *@
    <div class="modal fade" id="confirmarCambioEstado" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmarCambioEstadoLabel">Confirmar cambio de estado</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de cambiar el estado de este pedido a "<span id="estadoDestino"></span>"?</p>
                </div>
                <div class="modal-footer">
                    <form method="post" asp-action="CambiarEstadoPedido" id="formCambioEstado">
                        <input type="hidden" name="id" id="idPedido" />
                        <input type="hidden" name="nuevoEstado" id="nuevoEstado" />
                        <button type="submit" class="btn btn-primary">Confirmar</button>
                    </form>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Mensajes -->
    <div class="modal fade" id="mensajeModal" tabindex="-1" aria-labelledby="mensajeModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="mensajeModalLabel">Notificación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <p id="mensajeModalTexto"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Aceptar</button>
                </div>
            </div>
        </div>
    </div>





}

<script>
    // Mostrar modal de confirmación
    function mostrarConfirmacion(idPedido, nuevoEstado) {
        document.getElementById('idPedido').value = idPedido;
        document.getElementById('nuevoEstado').value = nuevoEstado;
        document.getElementById('estadoDestino').innerText = nuevoEstado;

        const modal = new bootstrap.Modal(document.getElementById('confirmarCambioEstado'));
        modal.show();
    }

    // Cargar detalles del pedido en modal
    const modalDetallePedido = document.getElementById('modalDetallePedido');
    modalDetallePedido.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const idPedido = button.getAttribute('data-id-pedido');
        const detalleContent = document.getElementById('detallePedidoContent');

        detalleContent.innerHTML = "Cargando...";

        fetch(`/Pedidos/DetallePedido?idPedido=${idPedido}`)
            .then(response => response.text())
            .then(html => {
                detalleContent.innerHTML = html;
            })
            .catch(error => {
                detalleContent.innerHTML = `<div class="text-danger">Error al cargar el detalle: ${error.message}</div>`;
            });
    });

    // Mostrar modal de comentarios
    function mostrarModalComentario(idPedido) {
        document.getElementById("pedidoId").value = idPedido;
        const modalComentario = new bootstrap.Modal(document.getElementById("modalComentario"));
        modalComentario.show();
    }

    // Mostrar modal de mensajes si existe TempData["Mensaje"]
    document.addEventListener("DOMContentLoaded", function () {
        const mensaje = @Html.Raw(Json.Serialize(TempData["Mensaje"] ?? "")); // Asigna un string vacío si es null
        const exito = '@(TempData["Exito"] != null && (bool)TempData["Exito"])';

        if (mensaje !== "") { // Solo muestra el modal si hay mensaje
            const mensajeModalTexto = document.getElementById("mensajeModalTexto");
            const mensajeModal = new bootstrap.Modal(document.getElementById("mensajeModal"));

            mensajeModalTexto.textContent = mensaje;

            const modalTitle = document.getElementById("mensajeModalLabel");
            modalTitle.textContent = exito === "True" ? "Operación Exitosa" : "Error";

            mensajeModal.show();
        }
    });

    // Limpiar clases y fondo al cerrar el modal de mensajes
    document.getElementById("mensajeModal").addEventListener("hidden.bs.modal", function () {
        document.body.classList.remove("modal-open");
        document.querySelector(".modal-backdrop")?.remove();
    });




</script>

<script>
        // Función para filtrar clientes en tiempo real
    function filterClientes() {
        const input = document.getElementById('filterCliente').value.toLowerCase();
        const options = document.querySelectorAll('#clientesContainer .cliente-option');

        options.forEach(option => {
            const nombre = option.dataset.nombre.toLowerCase();
            option.style.display = nombre.includes(input) ? 'block' : 'none';
        });
    }

    // Función para seleccionar un cliente y actualizar el campo oculto y el input de búsqueda
    function selectCliente(nombreCliente, nroCliente) {
        const selectedClienteInput = document.getElementById('selectedCliente');
        const filterClienteInput = document.getElementById('filterCliente');

        // Establecer el cliente seleccionado
        selectedClienteInput.value = nroCliente;
        filterClienteInput.value = nombreCliente;

        // Ocultar el contenedor de opciones (opcional)
        const clientesContainer = document.getElementById('clientesContainer');
        clientesContainer.style.display = 'none';

        // Mostrar el contenedor si el usuario vuelve a escribir
        filterClienteInput.addEventListener('input', () => {
            clientesContainer.style.display = 'block';
        });
    }

    // Mostrar la lista de opciones al hacer clic en el input
    document.getElementById('filterCliente').addEventListener('click', function () {
        const clientesContainer = document.getElementById('clientesContainer');
        clientesContainer.classList.remove('d-none');
    });

    // Ocultar la lista de opciones cuando se hace clic fuera del input y las opciones
    document.addEventListener('click', function (event) {
        const filterClienteInput = document.getElementById('filterCliente');
        const clientesContainer = document.getElementById('clientesContainer');

        if (!filterClienteInput.contains(event.target) && !clientesContainer.contains(event.target)) {
            clientesContainer.classList.add('d-none');
        }
    });


</script>


<script>
    // Función para filtrar vendedores en tiempo real
    function filterVendedores() {
        const input = document.getElementById('filterVendedor').value.toLowerCase();
        const options = document.querySelectorAll('#vendedoresContainer .vendedor-option');

        options.forEach(option => {
            const nombre = option.dataset.nombre.toLowerCase();
            option.style.display = nombre.includes(input) ? 'block' : 'none';
        });
    }

    // Función para seleccionar un vendedor y actualizar el campo oculto y el input de búsqueda
    function selectVendedor(nombreVendedor, nroVendedor) {
        const selectedVendedorInput = document.getElementById('selectedVendedor');
        const filterVendedorInput = document.getElementById('filterVendedor');

        // Establecer el vendedor seleccionado
        selectedVendedorInput.value = nroVendedor;
        filterVendedorInput.value = nombreVendedor;

        // Ocultar el contenedor de opciones (opcional)
        const vendedoresContainer = document.getElementById('vendedoresContainer');
        vendedoresContainer.style.display = 'none';

        // Mostrar el contenedor si el usuario vuelve a escribir
        filterVendedorInput.addEventListener('input', () => {
            vendedoresContainer.style.display = 'block';
        });
    }
</script>
