@using Front_End_Gestion_Pedidos.Models.ViewModel
@model ModificarPedidoModel

@{
    ViewData["Title"] = "Repetir Pedido";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="pagetitle">
    <h1>Modificar pedido</h1>
</div>

<section class="section">
    <div class="row">

        <input type="hidden" id="clienteId" value="@Model.ClienteSeleccionado.NroCliente" />

        <input type="hidden" id="puntosCliente" value="@Model.ClienteSeleccionado.Puntos" />





        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">

                    <div class="col-md-6">
                        <label for="medioPago" class="form-label">Medio de Pago</label>
                        <select id="medioPago" class="form-select form-select-sm">
                            <option value="Contado">Contado</option>
                            <option value="Credito">Crédito</option>
                            <option value="Tarjeta">Tarjeta</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Selección de Dirección -->
    <div class="col-lg-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Dirección</h5>
                <label for="direccion" class="form-label">Dirección</label>
                <select id="direccion" name="direccion" class="form-select form-select-sm">
                    @if (Model.ClienteSeleccionado != null)
                    {
                        <option value="@Model.ClienteSeleccionado.DirCliente">@Model.ClienteSeleccionado.DirCliente</option>
                        <option value="@Model.ClienteSeleccionado.Dir2Cliente">@Model.ClienteSeleccionado.Dir2Cliente</option>
                    }
                    else
                    {
                        <option value="" disabled selected>No hay direcciones disponibles</option>
                    }
                </select>
            </div>
        </div>
    </div>


    <!-- Filtro y Tabla -->
    <div class="row">
        <div class="col-lg-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Filtro de Productos</h5>
                    <div class="mb-3">
                        <label for="filtroProductos" class="form-label">Buscar Productos</label>
                        <input type="text" id="filtroProductos" class="form-control form-control-sm" placeholder="Buscar producto..." />
                        <div class="d-flex gap-2 mt-2">
                            <button type="button" class="btn btn-primary btn-sm" onclick="aplicarFiltro()">Aplicar Filtro</button>
                            <button type="button" class="btn btn-secondary btn-sm" onclick="limpiarFiltro()">Limpiar Filtro</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="col-lg-9">
            <div class="table-responsive">
                <table class="table table-hover table-sm" id="tablaProductos">
                    <thead class="table-light">
                        <tr>
                            <th class="text-nowrap">Nombre</th>
                            <th class="text-nowrap d-none d-md-table-cell">Detalle</th>
                            <th class="text-nowrap">Precio</th>
                            <th class="text-nowrap">Cantidad</th>
                        </tr>
                    </thead>
                    <tbody id="tablaProductosBody">
                        <!-- El contenido de las filas será generado dinámicamente -->
                    </tbody>
                </table>
            </div>



            <nav id="navPaginacion" class="d-flex justify-content-center align-items-center mt-0">
                <button class="btn btn-sm btn-secondary mx-1" onclick="paginaAnterior()">
                    &larr;
                </button>
                <div id="paginacion" class="d-flex gap-1"></div>
                <button class="btn btn-sm btn-secondary mx-1" onclick="paginaSiguiente()">
                    &rarr;
                </button>
            </nav>
        </div>
    </div>


    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Comentarios</h5>
                <div class="mb-3">
                    <textarea id="comentarios"
                              class="form-control form-control-sm"
                              rows="3"
                              placeholder="Escribe algún comentario..."
                              data-comentario="@Model.Pedidos.Comentarios"> 
                </textarea>
                </div>
            </div>
        </div>
    </div>

    <!-- footer del pedido -->
    @*  <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <br />
                    <span class="text-danger fw-bold">Total: $<span id="totalFooter">0.00</span></span>
                    <div class="d-flex gap-2">
                        <a href="#" class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modalCarrito" onclick="mostrarCarrito()">Ver carrito</a>

                        <button type="button" class="btn btn-primary btn-sm" onclick="ModificarPedidoCliente()">realizar pedido</button>
                    </div>
                </div>
            </div>
        </div>
    </div> *@


    <div id="footerPedido" class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex gap-2">
                        <a href="#" class="bi bi-cart btn-sm" data-bs-toggle="modal" data-bs-target="#modalCarrito" onclick="mostrarCarrito()">VER</a>
                    </div>

                    <span class="text-danger fw-bold center">Total: $<span id="totalFooter">0.00</span></span>
                    <div class="d-flex gap-2">


                        <button type="button" id="btnModificarPedido" class="btn btn-primary btn-sm" onclick="ModificarPedidoCliente()">ENVIAR</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Ver Carrito -->
    <div class="modal fade" id="modalCarrito" tabindex="-1" aria-labelledby="modalCarritoLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalCarritoLabel">Carrito</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-hover table-sm">
                            <thead class="table-light">
                                <tr>
                                    <th class="text-nowrap">Producto</th>
                                    <th class="text-nowrap">Precio</th>
                                    <th class="text-nowrap">Cantidad</th>
                                    <th class="text-nowrap">Subtotal</th>
                                </tr>
                            </thead>
                            <tbody id="tablaCarritoBody">
                                <!-- Las filas se generarán dinámicamente con JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-3 text-end">
                        <span class="fw-bold">Total: $<span id="totalCarrito">0</span></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>



    <!-- Modal de Mensaje -->
    <div class="modal fade" id="modalMensaje" tabindex="-1" aria-labelledby="modalMensajeLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalMensajeLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="mensajeModal"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
</section>


<script>
    const token = '@ViewData["Token"]';

    let ProductosSeleccionados = @Html.Raw(Json.Serialize(Model.ProductoSeleccionados));

    let cantidadesSeleccionadas = {};


    function actualizarTablaCantidades() {
        const cantidadesInputs = document.querySelectorAll('[id^="cantidad_"]');
        cantidadesInputs.forEach(input => {
            input.value = 0; // Establecer el valor a 0
        });

        let total = 0;
        document.getElementById("totalFooter").textContent = total.toFixed(2);
    }




    function actualizarCantidad(codigo, cantidad) {
        cantidad = parseInt(cantidad) || 0; // Convertir a entero o asignar 0 si es inválido

        // Obtener la fila correspondiente al producto
        const fila = document.querySelector(`#cantidad_${codigo}`).closest("tr");

        // Leer el precio desde la celda correspondiente en esa fila
        const precio = parseFloat(fila.querySelector("td:nth-child(3)").textContent);

        // Actualizar o eliminar la cantidad y precio seleccionados
        if (cantidad > 0) {
            // Guardar la cantidad y el precio en un objeto
            cantidadesSeleccionadas[codigo] = { cantidad: cantidad, precio: precio };
        } else {
            // Eliminar del objeto si la cantidad es 0
            delete cantidadesSeleccionadas[codigo];
        }

        actualizarTotal();



    }

    function actualizarTotal() {
        let total = 0;

        // Sumar el subtotal de cada producto seleccionado
        Object.keys(cantidadesSeleccionadas).forEach(codigo => {
            const item = cantidadesSeleccionadas[codigo];
            total += item.precio * item.cantidad;
        });

        // Actualizar el total en el footer
        document.getElementById("totalFooter").textContent = total.toFixed(2);
    }



    document.addEventListener("DOMContentLoaded", () => {
        // Inicializar cantidadesSeleccionadas con productos seleccionados previamente
        // Obtén el textarea
        const textareaComentarios = document.getElementById('comentarios');

        // Lee el comentario desde el atributo data-comentario
        const comentario = textareaComentarios.getAttribute('data-comentario');

        // Establece el valor del textarea
        if (comentario) {
            textareaComentarios.value = comentario;
        }

        productosOriginales.forEach(producto => {
            const seleccionado = ProductosSeleccionados.find(p => p.codigo === producto.codigo);
            if (seleccionado) {
                // Calcular el precio según los puntos del cliente
                let precio = producto.precio;
                const puntosCliente = parseInt(document.getElementById("puntosCliente").value, 10) || 0;
                if (puntosCliente === 1) precio = producto.stock_2;
                if (puntosCliente === 2) precio = producto.stock_3;
                if (puntosCliente === 3) precio = producto.stock_4;
                if (puntosCliente === 4) precio = producto.stock_5;

                // Guardar en cantidadesSeleccionadas
                cantidadesSeleccionadas[producto.codigo] = {
                    cantidad: seleccionado.cantidad,
                    precio: precio
                };
            }
        });

        renderizarTabla();
        actualizarTotal();
    });


    function renderizarTabla() {
        const inicio = (paginaActual - 1) * productosPorPagina;
        const fin = inicio + productosPorPagina;
        const productosPagina = productosFiltrados.slice(inicio, fin);

        const cuerpoTabla = document.querySelector("#tablaProductos tbody");
        cuerpoTabla.innerHTML = ""; // Limpiar contenido anterior

        productosPagina.forEach(producto => {
            const cantidadSeleccionada = cantidadesSeleccionadas[producto.codigo]?.cantidad || 0;

            // Calcular el precio según los puntos del cliente
            let precio = producto.precio;
            const puntosCliente = parseInt(document.getElementById("puntosCliente").value, 10) || 0;
            if (puntosCliente === 1) precio = producto.stock_2;
            if (puntosCliente === 2) precio = producto.stock_3;
            if (puntosCliente === 3) precio = producto.stock_4;
            if (puntosCliente === 4) precio = producto.stock_5;

            const fila = document.createElement("tr");
            fila.innerHTML = `
                <td>${producto.descripcion}</td>
                <td class="d-none d-md-table-cell">${producto.detalle || "Sin detalle"}</td>
                <td>${precio.toFixed(2)}</td>
                <td>
                    <input
                        type="number"
                        id="cantidad_${producto.codigo}"
                        class="form-control form-control-sm text-center"
                        min="0"
                        value="${cantidadSeleccionada}"
                        onchange="actualizarCantidad('${producto.codigo}', this.value)" />
                </td>
            `;
            cuerpoTabla.appendChild(fila);
        });

        renderizarPaginacion();
        actualizarTotal(); // Actualizar el total al renderizar la tabla
    }

    function mostrarCarrito() {
        const tablaCarritoBody = document.getElementById("tablaCarritoBody");
        const totalCarrito = document.getElementById("totalCarrito");
        let puntosCliente = parseInt(document.getElementById("puntosCliente").value, 10) || 0;
        let total = 0;

        tablaCarritoBody.innerHTML = ""; // Limpiar tabla

        Object.keys(cantidadesSeleccionadas).forEach(codigo => {
            const item = cantidadesSeleccionadas[codigo];
            const producto = productosOriginales.find(p => p.codigo === codigo);

            if (producto && item.cantidad > 0) {
                let precio = item.precio;

                const subtotal = precio * item.cantidad;
                total += subtotal;

                const filaCarrito = document.createElement("tr");
                filaCarrito.innerHTML = `
                    <td>${producto.descripcion}</td>
                    <td>$${precio.toFixed(2)}</td>
                    <td>${item.cantidad}</td>
                    <td>$${subtotal.toFixed(2)}</td>
                `;
                tablaCarritoBody.appendChild(filaCarrito);
            }
        });

        totalCarrito.textContent = total.toFixed(2); // Actualizar total
    }





    let productosPorPagina = 8;
    let paginaActual = 1;
    let productosOriginales = @Html.Raw(Json.Serialize(Model.Productos)); // Lista original de productos
    let productosFiltrados = [...productosOriginales]; // Inicializar lista filtrada con todos los productos





    // Función para renderizar la paginación
    function renderizarPaginacion() {
        const paginacionDiv = document.getElementById("paginacion");
        paginacionDiv.innerHTML = ""; // Limpiar contenido anterior

        const totalPaginas = Math.ceil(productosFiltrados.length / productosPorPagina);

        for (let i = 1; i <= totalPaginas; i++) {
            const boton = document.createElement("button");
            boton.innerText = i;
            boton.className = `btn btn-sm ${i === paginaActual ? "btn-primary" : "btn-secondary"}`;
            boton.onclick = () => {
                paginaActual = i;
                renderizarTabla();
            };
            paginacionDiv.appendChild(boton);
        }
    }

    function paginaAnterior() {
        if (paginaActual > 1) {
            paginaActual--;
            renderizarTabla();
        }
    }

    function paginaSiguiente() {
        const totalPaginas = Math.ceil(productosFiltrados.length / productosPorPagina);
        if (paginaActual < totalPaginas) {
            paginaActual++;
            renderizarTabla();
        }
    }

    // Función para aplicar el filtro
    function aplicarFiltro() {
        const filtro = document.getElementById("filtroProductos").value.trim().toLowerCase();
        productosFiltrados = productosOriginales.filter(producto =>
            producto.descripcion.toLowerCase().includes(filtro)
        );

        paginaActual = 1; // Reiniciar a la primera página
        renderizarTabla();
    }

    // Función para limpiar el filtro
    function limpiarFiltro() {
        document.getElementById("filtroProductos").value = ""; // Limpiar input
        productosFiltrados = [...productosOriginales]; // Restaurar productos originales

        paginaActual = 1; // Reiniciar a la primera página
        renderizarTabla();
    }

    // Inicializar tabla y paginación al cargar la página
    document.addEventListener("DOMContentLoaded", () => {
        renderizarTabla();
    });

    //MUestra si tiro success o error el pedido
    function mostrarMensajeModal(titulo, mensaje, redirigir = false) {
        // Establecer el título y el mensaje del modal
        document.getElementById('modalMensajeLabel').textContent = titulo;
        document.getElementById('mensajeModal').textContent = mensaje;

        // Mostrar el modal
        const modal = new bootstrap.Modal(document.getElementById('modalMensaje'));
        modal.show();

        // Redirigir al cerrar el modal si redirigir es true
        const modalElemento = document.getElementById('modalMensaje');
        modalElemento.addEventListener('hidden.bs.modal', function () {
            if (redirigir) {
                window.location.href = '/Home/Index'; // Redirige a la página deseada
            }
        }, { once: true }); // Escuchar el evento solo una vez
    }




    function ModificarPedidoCliente() {
        // Crear el objeto base pedidoModificado con el formato correcto
        const pedidoModificado = {
            pedido: {
                idPedido: @Html.Raw(Json.Serialize(Model.Pedidos.IdPedido)),
                idVendedor: @Html.Raw(Json.Serialize(Model.Pedidos.IdVendedor)), // Ajusta según tu modelo
                idCliente: parseInt(document.getElementById('clienteId').value, 10),
                idAdministracion:  1,
                idSupervisor: @Html.Raw(Json.Serialize(Model.Pedidos.IdSupervisor)),
                fechaCreacion: @Html.Raw(Json.Serialize(Model.Pedidos.FechaCreacion)),
                fechaEntrega: @Html.Raw(Json.Serialize(Model.Pedidos.FechaEntrega)),
                fechaEntregado: null, // Asegurar que sea null
                estado: "Preparando",
                metodoPago: document.getElementById('medioPago').value,
                total: 0, // Se calculará después
                comentarios: document.getElementById('comentarios').value,
                tarjetaID: @Html.Raw(Json.Serialize(Model.Pedidos.TarjetaID))
            },
            lineasPedido: [] // Se rellenará con las líneas del pedido
        };

        // Variables auxiliares
        let total = 0;
        const puntosCliente = parseInt(document.getElementById("puntosCliente").value, 10) || 0; // Capturar puntos del cliente

        // Iterar sobre los productos seleccionados y construir las líneas del pedido
        Object.keys(cantidadesSeleccionadas).forEach(codigo => {
            const cantidad = cantidadesSeleccionadas[codigo].cantidad;
            if (cantidad > 0) {
                const producto = productosOriginales.find(p => String(p.codigo) === String(codigo));
                if (producto) {
                    let precio = producto.precio;
                    if (puntosCliente === 1) precio = producto.stock_2;
                    if (puntosCliente === 2) precio = producto.stock_3;
                    if (puntosCliente === 3) precio = producto.stock_4;
                    if (puntosCliente === 4) precio = producto.stock_5;

                    const subtotal = precio * cantidad;
                    total += subtotal;

                    // Agregar línea de pedido
                    pedidoModificado.lineasPedido.push({
                        codigo: producto.codigo,
                        cantidad: cantidad,
                        precioUnitario: precio
                    });
                }
            }
        });

        // Asignar el total calculado
        pedidoModificado.pedido.total = total;

        // Enviar el pedido al backend
        //https://localhost:7078
        fetch(`https://apigestionpedidos-fxbafbb8b0htapdr.canadacentral-01.azurewebsites.net/api/v1/Pedidos/${pedidoModificado.pedido.idPedido}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}` // Incluir el token
            },
            body: JSON.stringify(pedidoModificado)
        })
            .then(response => {
                if (response.ok) {
                    return response.status;
                } else {
                    throw new Error('Error al realizar el pedido.');
                }
            })
            .then(data => {
                mostrarMensajeModal('Pedido Actualizado', 'El pedido fue actualizado con éxito.', true);

                // Limpiar cantidades seleccionadas
                cantidadesSeleccionadas = {};
                actualizarTablaCantidades();

                // Limpiar comentarios
                document.getElementById('comentarios').value = '';
            })
            .catch(error => {
                mostrarMensajeModal('Error', 'Hubo un problema al actualizar el pedido. Inténtelo nuevamente.');
                console.error('Error:', error);
            });
    }




</script>

<style>

    #footerPedido {
        align-items: end; /* Centrado vertical del contenido interno */
    }

    #btnModificarPedido {
        align-items: end; /* Centrado vertical del contenido interno */
    }

    #footerPedido {
        margin-top: 20px; /* Ajusta el valor según la distancia deseada */
    }

    #btnModificarPedido {
        margin-top: 5px; /* Ajusta el valor según sea necesario */
    }


    #navPaginacion {
        margin: 0px; /* Reduce el espacio superior */
        margin-bottom: 2rem;
        background-color: #fff; /* Fondo blanco */
        padding: 0.5rem; /* Espaciado interno */
        border-radius: 0.5rem; /* Bordes redondeados */
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Sombra suave */
    }

        #navPaginacion button {
            padding: 0.5rem; /* Espaciado interno */
            border-radius: 0.5rem; /* Bordes redondeados */
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Sombra suave */
            font-size: larger;
            margin: 0px 2px 0px 2px;
        }

    #tablaProductos {
        margin-bottom: 0px;
    }

        #tablaProductos th, #tablaProductos td {
            text-align: center; /* Centrar el texto horizontalmente */
            vertical-align: middle; /* Centrar el texto verticalmente */
        }

            #tablaProductos td:nth-child(4) {
                text-align: center; /* Asegura que los inputs estén alineados al centro */
            }

                #tablaProductos td:nth-child(4) input.form-control {
                    width: 50%; /* Ajusta el ancho según sea necesario */
                    margin: 0 auto; /* Centra horizontalmente */
                    text-align: center; /* Centra el texto dentro del input */
                    display: block; /* Asegura el centrado en el contenedor */
                }

</style>
