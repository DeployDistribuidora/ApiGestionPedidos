@model Front_End_Gestion_Pedidos.Models.ViewModel.HistorialPedidosViewModel
@inject IHttpContextAccessor HttpContextAccessor

<div class="pagetitle">
    <h1>Historial pedidos</h1>
</div>

<div class="alert alert-info d-inline-block alert-dismissible fade show" role="alert">
    Se muestran únicamente los pedidos entregados y cancelados.
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<section class="section">
    <div class="row">
        <!-- Filtros de Búsqueda -->
        <div class="col-lg-5">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Filtros de Búsqueda</h5>
                    <form method="get" asp-action="HistorialPedidos" class="row g-3">

                        <!-- Filtro por ID de Pedido -->
                        <div class="col-md-6">
                            <label for="inputIdPedido" class="form-label">ID de Pedido</label>
                            <input type="text" id="inputIdPedido" name="idPedido" class="form-control form-control-sm"
                                   placeholder="ID del pedido" value="@HttpContextAccessor.HttpContext.Request.Query["idPedido"]">
                        </div>

                        <!-- Filtro por Fechas -->
                        <div class="col-md-6">
                            <label for="inputFechas" class="form-label">Rango de Fechas</label>
                            <div class="input-group">
                                <input type="date" id="fechaInicio" name="fechaInicio" class="form-control form-control-sm"
                                       value="@HttpContextAccessor.HttpContext.Request.Query["fechaInicio"]" />
                                <span class="input-group-text">a</span>
                                <input type="date" id="fechaFin" name="fechaFin" class="form-control form-control-sm"
                                       value="@HttpContextAccessor.HttpContext.Request.Query["fechaFin"]" />
                            </div>
                        </div>

                        <!-- Filtro por Vendedor -->
                        <div class="col-md-6">
                            <label for="selectedVendedor" class="form-label">Vendedor</label>
                            <select id="selectedVendedor" name="vendedor" class="form-select form-select-sm mb-2">
                                <option value="">Todos los vendedores</option>
                                @foreach (var vendedor in Model.Vendedores)
                                {
                                    <option value="@vendedor.nro_Vendedor">@vendedor.Nombre</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-6">
                            <label for="inputEstado" class="form-label">Estado</label>
                            <select name="estado" class="form-select form-select-sm" id="inputEstado">
                                <option value="" selected>Todos los estados</option>
                                <option value="Cancelado">Pedidos cancelados</option>
                                <option value="Entregado">Pedidos entregados</option>
                            </select>
                        </div>


                        <!-- Mostrar filtro por cliente solo si el rol no es "Cliente" -->
                        @if (HttpContextAccessor.HttpContext.Session.GetString("Role") != "Cliente")
                        {
                            <div class="col-md-6">
                                <label for="filterCliente" class="form-label">Cliente</label>
                                <input type="text" id="filterCliente" class="form-control form-control-sm mb-2"
                                       placeholder="Escribe para buscar un cliente..." oninput="filtrarClientes()">

                                <!-- Select con lista de clientes -->
                                <select id="clienteSelect" name="cliente" class="form-select form-select-sm">
                                    <option value="" disabled selected>Seleccione un cliente</option>
                                    @foreach (var cliente in Model.Clientes)
                                    {
                                        <option value="@cliente.NroCliente"
                                                data-id="@cliente.NroCliente"
                                                data-nombre="@cliente.NombreCliente">
                                            @cliente.NroCliente - @cliente.NombreCliente
                                        </option>
                                    }
                                </select>
                            </div>
                        }




                        <div class="text-center mt-3">
                            <button type="submit" class="btn btn-primary btn-sm">Buscar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>



        <!-- Tabla de Pedidos -->
        <div class="col-lg-7">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Pedidos</h5>
                    <div class="table-responsive">
                        <table class="table table-hover table-sm">
                            <thead class="table-primary">
                                <tr>
                                    <th scope="col"></th>
                                    <th scope="col">Pedido</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col" class="d-none d-md-table-cell">Vendedor</th>
                                    <th scope="col">Estado</th>
                                    <th scope="col" class="d-none d-md-table-cell">Creación</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (!Model.Pedidos.Any())
                                {
                                    <tr>
                                        <td colspan="6" class="text-center text-muted">No se encontraron pedidos con los filtros aplicados.</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var pedido in Model.Pedidos)
                                    {
                                        var cliente = Model.Clientes.FirstOrDefault(c => c.NroCliente == pedido.IdCliente);

                                        // Determinar la clase CSS según el estado del pedido
                                        string rowClass = pedido.Estado switch
                                        {
                                            "Pendiente" => "table-info",
                                            "Preparando" => "table-primary",
                                            "En viaje" => "table-warning",
                                            "Entregado" => "table-success",
                                            "Cancelado" => "table-danger",
                                            _ => "" // Sin clase específica para otros estados
                                        };

                                        <tr class="@rowClass">
                                            <td>
                                                <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#modalDetallePedido" data-id-pedido="@pedido.IdPedido" title="Ver Detalles">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            </td>

                                            <td>@pedido.IdPedido</td>
                                            <td>@(cliente != null ? cliente.NombreCliente?.Trim() : "Cliente desconocido")</td>
                                            <td class="d-none d-md-table-cell">
                                                @Model.Vendedores.FirstOrDefault(v => v.nro_Vendedor == pedido.IdVendedor)?.Nombre
                                            </td>
                                            <td>@pedido.Estado</td>
                                            <td class="d-none d-md-table-cell">@pedido.FechaCreacion.ToShortDateString()</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>


    </div>

    <!-- Modal Dialog Scrollable -->
    <div class="modal fade" id="modalDetallePedido" tabindex="-1">
        <div class="modal-dialog modal-dialog-scrollable modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detalle del Pedido</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="detallePedidoContent" class="text-center text-muted">
                        Cargando...
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

</section>



<script>
    const modalDetallePedido = document.getElementById('modalDetallePedido');

    modalDetallePedido.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const idPedido = button.getAttribute('data-id-pedido');
        const detalleContent = document.getElementById('detallePedidoContent');

        // Mostrar mensaje de carga
        detalleContent.innerHTML = "Cargando...";

        // Cargar contenido dinámicamente desde el controlador
        fetch(`/Pedidos/DetallePedido?idPedido=${idPedido}`)
            .then(response => response.text())
            .then(html => {
                detalleContent.innerHTML = html;
            })
            .catch(error => {
                detalleContent.innerHTML = `<div class="text-danger">Error al cargar el detalle: ${error.message}</div>`;
            });
    });


    document.addEventListener("DOMContentLoaded", function () {
        const inputEstado = document.getElementById('inputEstado');

        // Recuperar el estado seleccionado de la URL y aplicarlo al <select>
        const urlParams = new URLSearchParams(window.location.search);
        const estadoSeleccionado = urlParams.get("estado");

        if (estadoSeleccionado) {
            inputEstado.value = estadoSeleccionado;
        }
    });
</script>


<script>
    // Función para cargar el contenido dinámico del detalle del pedido en el modal
    function cargarDetallePedido(event) {
        const button = event.relatedTarget;
        const idPedido = button.getAttribute('data-id-pedido');
        const detalleContent = document.getElementById('detallePedidoContent');

        // Mostrar mensaje de carga
        detalleContent.innerHTML = "Cargando...";

        // Cargar contenido dinámicamente desde el controlador
        fetch(`/Pedidos/DetallePedido?idPedido=${idPedido}`)
            .then(response => response.text())
            .then(html => {
                detalleContent.innerHTML = html;
            })
            .catch(error => {
                detalleContent.innerHTML = `<div class="text-danger">Error al cargar el detalle: ${error.message}</div>`;
            });
    }

    // Evento para inicializar el modal de detalle del pedido
    document.getElementById('modalDetallePedido').addEventListener('show.bs.modal', cargarDetallePedido);


    function filtrarClientes() {
        const filtro = document.getElementById("filterCliente").value.trim().toLowerCase();
        const clienteSelect = document.getElementById("clienteSelect");

        // Obtener la opción actualmente seleccionada
        const opcionSeleccionada = clienteSelect.value;

        // Obtener todas las opciones del select
        const opciones = clienteSelect.querySelectorAll("option");

        let hayCoincidencias = false;

        opciones.forEach(option => {
            if (!option.value) return; // Ignorar la opción por defecto

            const nombre = option.getAttribute("data-nombre").toLowerCase();
            const telefono = option.getAttribute("data-telefono") ? option.getAttribute("data-telefono").toLowerCase() : "";
            const coincide = nombre.includes(filtro) || telefono.includes(filtro);

            if (coincide) {
                option.style.display = ""; // Asegurar que la opción está visible
                option.disabled = false;  // Permitir selección
                hayCoincidencias = true;
            } else {
                option.style.display = "none";  // Ocultar opción que no coincide
            }
        });

        // Restaurar la selección anterior después del filtrado
        if (opcionSeleccionada) {
            clienteSelect.value = opcionSeleccionada;
        }
    }






    document.addEventListener("DOMContentLoaded", function () {
        const selectedVendedor = document.getElementById('selectedVendedor');

        // Recuperar el vendedor seleccionado desde la URL y aplicarlo al <select>
        const urlParams = new URLSearchParams(window.location.search);
        const vendedorSeleccionado = urlParams.get("vendedor");

        if (vendedorSeleccionado) {
            selectedVendedor.value = vendedorSeleccionado;
        }
    });
</script>

